/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018-2022 Model Driven Solutions, Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz
 * 
 *****************************************************************************/

modeltype SysML uses "https://www.omg.org/spec/SysML/20240201";
modeltype UML uses "http://www.eclipse.org/uml2/5.0.0/UML";
modeltype Ecore uses "http://www.eclipse.org/emf/2002/Ecore";

transformation SysML2UML(in sysml: SysML, out uml: UML);

main() {
log("1.MAIN");
	var rootNamespace := sysml.rootObjects()![SysML::Namespace];
	object Model {
		name := "Model";		
		packagedElement := rootNamespace.ownedMembers()->map toPackageableElement();
	};	
}

// CORE

// Element

query SysML::Element::name(): String {
log("2.query SysML::Element::name(): String");
	return if self.name = null then '<null>'
		else if self.name = '' then '<empty>'
		else self.name
		endif endif;
}

query SysML::Element::ownedElements(): Sequence(Element) {
log("3.query SysML::Element::name(): String");
	return self.ownedRelationship.ownedRelatedElement;
}

abstract mapping SysML::Element::toElement(): UML::Element {
log("4.abstract mapping SysML::Element::toElement(): UML::Element ");
	log('Mapping ' + self.metaClassName() + ' ' + self.name() + ' to ' + result.metaClassName());	
	ownedComment := self.ownedElements()[SysML::Comment]->map toComment();
	ownedComment->forEach(comment) {
		comment.annotatedElement := result
	}
}

abstract mapping SysML::Element::toNamedElement(): UML::NamedElement
	inherits SysML::Element::toElement {
	log("5.abstract mapping SysML::Element::toNamedElement(): UML::NamedElement ");	
	name := self.name;
//	var package = self.owningPackage;
//	if package <> null then {
//		var naming = package.namingOf(self);
//		name := naming.name;
//		visibility := toVisibilityKind(naming.visibility);
//	} endif;
}

mapping SysML::Element::toPackageableElement(): UML::PackageableElement
	disjuncts 
		SysML::Feature::toClass,
		SysML::Association::toAssociationClass,
		SysML::Classifier::toClass,
		SysML::Package::toPackage;

mapping SysML::Element::toClass(): UML::Class
	disjuncts
		SysML::Feature::toClass,
		SysML::Association::toAssociationClass,
		SysML::Classifier::toClass;

// Comments

mapping SysML::Comment::toComment(): UML::Comment
	inherits SysML::Element::toElement {
	log("6.mapping SysML::Comment::toComment(): UML::Comment");		
	body := self.body;
}

// Namespace

query SysML::Namespace::ownedMemberMemberships(): OrderedSet(SysML::OwningMembership) {
	log("7.query SysML::Namespace::ownedMemberMemberships(): OrderedSet(SysML::OwningMembership) ");		
	return self.ownedRelationship[SysML::OwningMembership][ownedRelatedElement->forAll(not oclIsKindOf(AnnotatingElement))];
}

query SysML::Namespace::ownedFeatureMemberships(): OrderedSet(SysML::FeatureMembership) {
	log("8.query SysML::Namespace::ownedFeatureMemberships(): OrderedSet(SysML::FeatureMembership) ");	
	return self.ownedRelationship[SysML::FeatureMembership];
}

query SysML::Namespace::ownedMembers(): Sequence(SysML::Element) {
log("9.query SysML::Namespace::ownedMembers(): Sequence(SysML::Element) ");	
	return self.ownedMemberMemberships().ownedRelatedElement;
}

query SysML::Namespace::ownedFeatures(): Sequence(SysML::Feature) {
log("10.query SysML::Namespace::ownedFeatures(): Sequence(SysML::Feature) ");
	return self.ownedFeatureMemberships().ownedRelatedElement.oclAsType(SysML::Feature);
}

query SysML::Namespace::members(): Sequence(SysML::Element) {
log("11.query SysML::Namespace::members(): Sequence(SysML::Element)");
	return self.ownedRelationship[SysML::Membership].memberElement[not oclIsKindOf(AnnotatingElement)];
}

query SysML::Namespace::features(): Sequence(SysML::Feature) {
log("12.query SysML::Namespace::features(): Sequence(SysML::Feature)");
	return self.members()[SysML::Feature];
}

query SysML::Namespace::hasFeatures(): Boolean {
log("13.query SysML::Namespace::hasFeatures(): Boolean ");
	return self.features()->notEmpty();
}

mapping SysML::Namespace::toNamespace(): UML::Namespace
	disjuncts 
		SysML::Association::toAssociationClass,
		SysML::Classifier::toClass,
		SysML::Package::toPackage;

//query SysML::Namespace::namingOf(e: Element): Membership {
//	return self.membership![memberElement = e];
//}

// Membership

query SysML::OwningMembership::ownedMemberElement(): SysML::Element {
log("14.query SysML::OwningMembership::ownedMemberElement(): SysML::Element");
	return self.ownedRelatedElement![true];
}

helper SysML::OwningMembership::mapToPackageableElement(): UML::PackageableElement {
log("15.helper SysML::OwningMembership::mapToPackageableElement(): UML::PackageableElement");
	var element := self.ownedMemberElement().map toPackageableElement();
	element.visibility := toVisibilityKind(self.visibility);
	return element;
}

helper SysML::Membership::mapToFeature(): UML::Feature {
log("16helper SysML::Membership::mapToFeature(): UML::Feature ");
	return self.memberElement.oclAsType(SysML::Feature).map toProperty();
}

helper SysML::FeatureMembership::mapToFeature(): UML::Feature {
log("17helper SysML::FeatureMembership::mapToFeature(): UML::Feature");
	var feature := self.ownedRelatedElement![true].oclAsType(SysML::Feature);
	var umlFeature: UML::Feature;
	if feature.oclIsKindOf(SysML::Connector) then {
		umlFeature := feature.oclAsType(SysML::Connector).map toConnector();
	} else {
		umlFeature := feature.map toProperty();
	} endif;
	if feature.isComposite then {
		umlFeature.oclAsType(UML::Property).aggregation := UML::AggregationKind::composite;
	} endif;
	umlFeature.visibility := toVisibilityKind(self.visibility);
	return umlFeature;
}

query toVisibilityKind(visibility : SysML::VisibilityKind): UML::VisibilityKind {
log("18query toVisibilityKind(visibility : SysML::VisibilityKind): UML::VisibilityKind");
	return 
		if visibility = null then UML::VisibilityKind::public
		else if visibility = SysML::VisibilityKind::private then UML::VisibilityKind::private
		else if visibility = SysML::VisibilityKind::public then UML::VisibilityKind::public
		else if visibility = SysML::VisibilityKind::protected then UML::VisibilityKind::protected
		endif endif endif endif;
}

// Package

mapping SysML::Package::toPackage(): UML::Package
	inherits SysML::Element::toNamedElement {
log("19mapping SysML::Package::toPackage(): UML::Package");
	packagedElement += self.ownedMemberMemberships()->mapToPackageableElement();
	packagedElement += self.features()->map toClass();
}

// CLASSIFICATION

// Type

abstract mapping SysML::Type::toClass(): UML::Class
	inherits SysML::Element::toNamedElement 
	when { not self.oclIsKindOf(SysML::Connector) } {
	log("20abstract mapping SysML::Type::toClass(): UML::Class
	inherits SysML::Element::toNamedElement 
	when { not self.oclIsKindOf(SysML::Connector) ");
	
	var features := self.ownedFeatureMemberships()->mapToFeature();
	ownedAttribute := features[UML::Property];
	ownedConnector := features[UML::Connector];
	ownedRule := features[UML::Constraint];
	ownedRule->forEach(constraint){
		constraint.constrainedElement := result;
	};
	
	nestedClassifier := self.members()->map toClass();
	generalization := self.ownedRelationship[SysML::Specialization]->map toGeneralization();	
}

// Classifier

mapping SysML::Classifier::toClass(): UML::Class
	inherits SysML::Type::toClass {
	log("21mapping SysML::Classifier::toClass(): UML::Class
	inherits SysML::Type::toClass ");
	 }

// Association

mapping SysML::Association::toAssociationClass(): UML::AssociationClass
	inherits SysML::Element::toNamedElement {
	
	log("22mapping SysML::Association::toAssociationClass(): UML::AssociationClass
	inherits SysML::Element::toNamedElement ");
	navigableOwnedEnd := self.ownedMemberMemberships()->mapToFeature()[UML::Property];
}

// Specialization

mapping SysML::Specialization::toGeneralization(): UML::Generalization
	when { self.oclIsTypeOf(SysML::Specialization) } {
			log("23mapping SysML::Specialization::toGeneralization(): UML::Generalization
	when { self.oclIsTypeOf(SysML::Specialization) } ");
	general := self.general.late resolveone(UML::Class);
}

// Feature

query SysML::Feature::subsettedFeatures(): Sequence(SysML::Feature) {
log("24query SysML::Feature::subsettedFeatures(): Sequence(SysML::Feature)");
	return self.ownedRelationship[SysML::Subsetting].subsettedFeature;
}

query SysML::Feature::redefinedFeatures(): Sequence(SysML::Feature) {
log("25query SysML::Feature::redefinedFeatures(): Sequence(SysML::Feature)");
	return self.ownedRelationship[SysML::Redefinition].redefinedFeature;
}

query SysML::Feature::valuation(): SysML::FeatureValue {
log("26query SysML::Feature::valuation(): SysML::FeatureValue ");
	return self.ownedRelationship![FeatureValue];
}

query SysML::Feature::types(): Sequence(SysML::Type) {
log("27query SysML::Feature::types(): Sequence(SysML::Type) ");
	return self.ownedRelationship[SysML::FeatureTyping].type;
	
}

helper SysML::Feature::parentTypeElement(): SysML::Element{
log("28helper SysML::Feature::parentTypeElement(): SysML::Element");
	return if self.types()->notEmpty() then self.types()![true] 
		   else if self.redefinedFeatures()->notEmpty() then self.redefinedFeatures()![true].typeElement()
		   else if self.subsettedFeatures()->notEmpty() then self.subsettedFeatures()![true].typeElement()
		   else null 
		   endif endif endif;
}

helper SysML::Feature::typeElement(): SysML::Element {
log("29helper SysML::Feature::typeElement(): SysML::Element ");
	var parentTypeElement = self.parentTypeElement();
	return if parentTypeElement = null or self.hasFeatures() then self
		   else parentTypeElement
		   endif;
}

abstract mapping SysML::Feature::toNamedElement(): UML::NamedElement 
	inherits SysML::Element::toNamedElement {
	log("30abstract mapping SysML::Feature::toNamedElement(): UML::NamedElement 
	inherits SysML::Element::toNamedElement");
	if name = null and self.redefinedFeatures()->notEmpty() then {
		name := self.redefinedFeatures()![true].name;
	} endif;
}

mapping SysML::Feature::toProperty(): UML::Property
	inherits SysML::Feature::toNamedElement {
	log("31mapping SysML::Feature::toProperty(): UML::Property
	inherits SysML::Feature::toNamedElement");
	type := self.typeElement().late resolveone(UML::Class);
	self.mapMultiplicity(result);
	redefinedProperty := self.redefinedFeatures()->late resolveone(UML::Property);
	subsettedProperty := self.subsettedFeatures()->late resolveone(UML::Property);
	if self.isComposite then {
		aggregation := UML::AggregationKind::composite;
	} endif;
	if self.valuation() <> null then {
		defaultValue := self.valuation().value.map toValueSpecification();
	} endif;
}

mapping SysML::Feature::toPort(): UML::Port
	inherits SysML::Feature::toProperty {
		log("32mapping SysML::Feature::toPort(): UML::Port
	inherits SysML::Feature::toProperty");
	aggregation := UML::AggregationKind::composite;
}

mapping SysML::Feature::toInstanceSpecification(): UML::InstanceSpecification
	inherits SysML::Feature::toNamedElement {
			log("33mapping SysML::Feature::toInstanceSpecification(): UML::InstanceSpecification
	inherits SysML::Feature::toNamedElement");
	classifier += self.typeElement().late resolveone(UML::Class);
}

mapping SysML::Feature::toClass(): UML::Class
	inherits SysML::Type::toClass, SysML::Feature::toNamedElement
	when { 	not self.oclIsKindOf(SysML::Connector) } {
	log("34mapping SysML::Feature::toClass(): UML::Class
	inherits SysML::Type::toClass, SysML::Feature::toNamedElement
	when { 	not self.oclIsKindOf(SysML::Connector) }");
	var typeElement := self.parentTypeElement();
	if typeElement <> null then {
		generalization += object UML::Generalization {
			general := typeElement.late resolveone(UML::Class);
		}
	} endif;
	
//	self.ownedType->forEach (type) {
//		var classifier = type.map toClass();
//		nestedClassifier += classifier;
//		
//		var superclass := self.mapType();		
//		if superclass <> null then {
//			generalization += object UML::Generalization {
//				general := superclass;
//			}
//		} endif;
//	};
}

// Multiplicity

helper SysML::Feature::mapMultiplicity(inout element: UML::MultiplicityElement) {
	log("35SysML::Feature::mapMultiplicity(inout element: UML::MultiplicityElement)");
	if self.multiplicity = null or not self.multiplicity.oclIsKindOf(SysML::MultiplicityRange) then {
		element.upper := 1;
		element.lower := 1;
	} else {
		var range = self.multiplicity.oclAsType(SysML::MultiplicityRange);
		if range.upperBound <> null and 
			range.upperBound.oclIsKindOf(SysML::LiteralInfinity) then {
			element.upper := -1;
		} else if range.upperBound <> null then {
			element.upper := range.upperBound.oclAsType(SysML::LiteralInteger).value;
		} else {
			element.upper := 1;
		} endif endif;
		if range.lowerBound <> null then {
			element.lower := range.lowerBound.oclAsType(SysML::LiteralInteger).value;
		} else if element.upper = -1 then {
			element.lower := 0;
		} else {
			element.lower := element.upper;
		} endif endif;
	} endif;
}

// Invariants

mapping SysML::Invariant::toConstraint(): UML::Constraint
	inherits SysML::Feature::toNamedElement;

// Connectors

mapping SysML::Connector::toConnector(): UML::Connector
	inherits SysML::Element::toNamedElement {
		log("36mapping SysML::Connector::toConnector(): UML::Connector
	inherits SysML::Element::toNamedElement ");
	// Note: This presumes that the connector ends are ordered the same as
	// the association ends.
	_'end' += self.relatedFeature->map toConnectorEnd();
	type := self.types()[SysML::Association].late resolveone(UML::Association);
}

mapping SysML::Feature::toConnectorEnd(): UML::ConnectorEnd {
	log("37mapping SysML::Feature::toConnectorEnd(): UML::ConnectorEnd");
	role := self.late resolveone(UML::Property);
	if self.owningNamespace <> null and 
		self.owningNamespace.oclIsKindOf(SysML::Feature) then {
		partWithPort := self.owningNamespace.late resolveone(UML::Property);
	} endif;
}

constructor UML::ConnectorEnd::ConnectorEnd(feature: SysML::Feature) {
	log("38constructor UML::ConnectorEnd::ConnectorEnd(feature: SysML::Feature)");
	role := feature.late resolveone(UML::Property);
	var element: SysML::Element := feature;
	if element.owningMembership <> null and 
		element.owningMembership.membershipOwningNamespace.oclIsKindOf(SysML::Feature) then {
		partWithPort := element.owningMembership.membershipOwningNamespace.late resolveone(UML::Property);
	} endif;
}

// BEHAVIOR

// Expressions

mapping SysML::Expression::toValueSpecification(): UML::ValueSpecification
	disjuncts
		SysML::NullExpression::toLiteralNull,
		SysML::LiteralExpression::toLiteralSpecification,
		SysML::OperatorExpression::toExpression,
//		SysML::SequenceAccessExpression::toExpression,
//		SysML::SequenceConstructionExpression::toExpression,
		SysML::FeatureReferenceExpression::toExpression;

mapping SysML::NullExpression::toLiteralNull(): UML::LiteralNull
	inherits SysML::Element::toNamedElement {
}

mapping SysML::LiteralExpression::toLiteralSpecification(): UML::LiteralSpecification
	disjuncts
		SysML::LiteralBoolean::toLiteralBoolean,
		SysML::LiteralString::toLiteralString,
		SysML::LiteralInteger::toLiteralInteger,
		SysML::LiteralRational::toLiteralReal,
		SysML::LiteralInfinity::toLiteralUnlimitedNatural;

mapping SysML::LiteralBoolean::toLiteralBoolean(): UML::LiteralBoolean
	inherits SysML::Element::toNamedElement {
	value := self.value;
}

mapping SysML::LiteralString::toLiteralString(): UML::LiteralString
	inherits SysML::Element::toNamedElement {
	value := self.value;
}

mapping SysML::LiteralInteger::toLiteralInteger(): UML::LiteralInteger
	inherits SysML::Element::toNamedElement {
	value := self.value;
}

mapping SysML::LiteralRational::toLiteralReal(): UML::LiteralReal
	inherits SysML::Element::toNamedElement {
	value := self.value;
}

mapping SysML::LiteralInfinity::toLiteralUnlimitedNatural(): UML::LiteralUnlimitedNatural
	inherits SysML::Element::toNamedElement {
	value := -1;
}


mapping SysML::OperatorExpression::toExpression(): UML::Expression
	inherits SysML::Element::toNamedElement {
	symbol := self.operator;
	operand := self.operand->map toValueSpecification();
}


/*
mapping SysML::FeatureAccessExpression::toExpression(): UML::Expression
	inherits SysML::Element::toNamedElement {
	symbol := '.' + self.accessedFeature.name;
	operand += self.expression.map toValueSpecification();
}
*/

/*
mapping SysML::SequenceAccessExpression::toExpression(): UML::Expression
	inherits SysML::Element::toNamedElement {
	symbol := 'at';
	operand += self.primary.map toValueSpecification();
	operand += self.index.map toValueSpecification();
}
*/

/*
mapping SysML::SequenceConstructionExpression::toExpression(): UML::Expression
	inherits SysML::Element::toNamedElement {
	symbol := 'sequence';
	operand := self.element->map toValueSpecification();
}
*/

mapping SysML::FeatureReferenceExpression::toExpression(): UML::Expression
	inherits SysML::Element::toNamedElement {
	symbol := self.referent.name;
}